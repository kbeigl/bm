package bm.traccar.api;

import static org.junit.jupiter.api.Assertions.assertEquals;

import bm.traccar.generated.model.dto.Device;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;

/**
 * Test <code>api/devices</code> methods, @see <a
 * href="https://www.traccar.org/api-reference/#tag/Devices">DevicesApi</a> with ApiService. <br>
 * Create, update, delete Devices for Users in traccar datamodel.
 */
@SpringBootTest
@EnableAutoConfiguration
@ContextConfiguration(classes = {ApiService.class})
@TestPropertySource("classpath:application.properties")
@Import(ApiConfig.class)
@ExtendWith(ClientExceptionHandler.class)
public class DevicesApiIT extends BaseIntegrationTest {
  // private static final Logger logger = LoggerFactory.getLogger(DevicesApiIT.class);

  /*
   * storyboard create device > who does it belong create user > create device for
   * user access device as user and as admin/superuser
   */

  /** A new device always belongs to the authenticated user. <br> */
  @Test
  public void createUpdateDeleteDevice() {

    api.setBasicAuth(adminMail, adminPassword);
    // get nr of devices, assert devices++, back to nr
    int deviceNr = api.devices.getDevices(null).size();

    // create / receive device
    Device device = new Device();
    // device.setId(5); // do not use!, generated by DB
    device.setName("Kristof Mobile");
    device.setUniqueId("574322");

    Device newDevice = api.devices.createDevice(device);
    assertEquals(deviceNr + 1, api.devices.getDevices(null).size());

    // returns the generated id (asserts not null)
    long newDeviceId = newDevice.getId();
    assertEquals("574322", newDevice.getUniqueId());

    // TODO update device
    newDevice.setModel("Samsung A52");
    Device putDevice = api.devices.updateDevice(newDeviceId, newDevice);
    assertEquals(deviceNr + 1, api.devices.getDevices(null).size());

    // delete user
    api.devices.deleteDevice(newDeviceId);
    assertEquals(deviceNr, api.devices.getDevices(null).size());

    // test delete user > what happens to the device?

    // TODO delete device
    // api.devices.deleteDevice(newDeviceId);
    // assertEquals(deviceNr, api.devices.getDevices(null).size());
  }

  @Test
  public void getDevices() {
    api.setBearerToken(virtualAdmin);
    // List<Device> devices =
    api.devices.getDevices(null);
  }

  /**
   * A device created by the virtual Admin is not visible in the UI and is not listed in his device
   * list. Yet ist exists and we'll see what we can make of it.
   */
  @Test
  public void createVirtualDevice() {

    api.setBearerToken(virtualAdmin);
    String virtualAdminId = "9000000000000000000";
    // get nr of devices, assert devices++, back to nr
    int deviceNr = api.devices.getDevices(null).size();
    // create / receive device
    Device device = new Device();
    device.setName("Virtual Admin");
    device.setUniqueId(virtualAdminId);
    // TODO check if it exists to avoid exception
    Device newDevice = api.devices.createDevice(device);

    // returns the generated id (asserts not null)
    long newDeviceId = newDevice.getId();
    assertEquals(virtualAdminId, newDevice.getUniqueId());

    assertEquals(0, api.devices.getDevices(null).size());
    api.devices.deleteDevice(newDeviceId);
  }
}
